{{/* vim: set filetype=mustache: */}}
{{- $prometheus_port := splitList ":" (toString (index .Values.config "prometheus-serve-addr"))|last -}}
apiVersion: {{ include "apps.apiVersion" . }}
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/name: {{ include "cilium.name" . }}
    helm.sh/chart: {{ include "cilium.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: agent
    kubernetes.io/cluster-service: "true"
  name: {{ template "cilium.fullname" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: agent
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/agent-cm.yml") . | sha256sum }}
      {{- if hasKey .Values.config "prometheus-serve-addr" }}
        prometheus.io/port: {{ $prometheus_port }}
        prometheus.io/scrape: "true"
      {{- end }}
      {{- if semverCompare "< 1.11-0" .Capabilities.KubeVersion.GitVersion }}
        scheduler.alpha.kubernetes.io/critical-pod: ""  # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      {{- end }}
      {{- with .Values.agent.annotations }}
{{ toYaml . | indent 8 }}
      {{- end -}}
      labels:
        app.kubernetes.io/name: {{ include "cilium.name" . }}
        helm.sh/chart: {{ include "cilium.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/component: agent
        kubernetes.io/cluster-service: "true"
      {{- with .Values.agent.labels }}
{{ toYaml . | indent 8 }}
      {{- end -}}
    spec:
      containers:
      - args:
        - --kvstore=etcd
        - --kvstore-opt=etcd.config=/etc/etcd.yml
        - --container-runtime={{ .Values.agent.runtime }}
        - --config-dir=/etc/cilium
      {{- if .Values.agent.ipsec.enable }}
        - --enable-ipsec
        - --ipsec-key-file=/etc/pki/ipsec
      {{- end }}
        command:
        - cilium-agent
        env:
      {{- with .Values.agent.env }}
{{ toYaml . | indent 8 }}
      {{- end -}}
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_FLANNEL_MASTER_DEVICE
          valueFrom:
            configMapKeyRef:
              key: flannel-master-device
              name: cilium-config
              optional: true
        - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
          valueFrom:
            configMapKeyRef:
              key: flannel-uninstall-on-exit
              name: cilium-config
              optional: true
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        image: "{{ .Values.agent.image.repository }}:{{ .Values.agent.image.tag }}"
        imagePullPolicy: {{ .Values.agent.image.pullPolicy }}
        lifecycle:
          postStart:
            exec:
              command:
              - /cni-install.sh
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        livenessProbe:
          exec:
            command:
            - cilium
            - status
          failureThreshold: 10
          # The initial delay for the liveness probe is intentionally large to
          # avoid an endless kill & restart cycle if in the event that the initial
          # bootstrapping takes longer than expected.
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: cilium-agent
      {{- if hasKey .Values.config "prometheus-serve-addr" }}
        ports:
        - containerPort: {{ $prometheus_port }}
          hostPort: {{ $prometheus_port }}
          name: prometheus
          protocol: TCP
      {{- end }}
        readinessProbe:
          exec:
            command:
            - cilium
            - status
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /etc/etcd.yml
          subPath: etcd.yml
          name: etcd-config
          readOnly: true
        - mountPath: /etc/pki/etcd
          name: etcd-secrets
          readOnly: true
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /etc/cilium
          name: cilium-config
          readOnly: true
      {{- if eq .Values.agent.runtime "docker" }}
        - mountPath: /var/run/docker.sock
          name: docker-socket
      {{- else if eq .Values.agent.runtime "containerd" }}
        - mountPath: /var/run/containerd/containerd.sock
          name: containerd-socket
      {{- else if eq .Values.agent.runtime "crio" }}
        - mountPath: /var/run/crio/crio.sock
          name: crio-socket
      {{- end }}
      dnsPolicy: {{ .Values.agent.dnsPolicy }}
      hostNetwork: true
      hostPID: false
      initContainers:
      - command:
        - /init-container.sh
        env:
        - name: CLEAN_CILIUM_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CLEAN_CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        image: "{{ .Values.agent.init_image.repository }}:{{ .Values.agent.init_image.tag }}"
        imagePullPolicy: {{ .Values.agent.init_image.pullPolicy }}
        name: clean-cilium-state
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /var/run/cilium
          name: cilium-run
      restartPolicy: Always
    {{- if semverCompare "<= 1.8-0" .Capabilities.KubeVersion.GitVersion }}
      serviceAccount: {{ template "cilium.fullname" . }}
    {{- else }}
      serviceAccountName: {{ template "cilium.fullname" . }}
    {{- end }}
      terminationGracePeriodSeconds: 1
    {{- if semverCompare "=> 1.11-0" .Capabilities.KubeVersion.GitVersion }}
      priorityClassName: system-node-critical
    {{- end }}
    {{- with .Values.agent.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end -}}
      volumes:
      # To keep state between restarts / upgrades
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
      # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      # To install cilium cni plugin in the host
      - hostPath:
          path: /opt/cni/bin
          type: DirectoryOrCreate
        name: cni-path
      # To install cilium cni configuration in the host
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
      # To read the configuration from the config map
      - configMap:
          name: {{ template "cilium.fullname" . }}-config
        name: cilium-config
      # To read the etcd config stored in config maps
      - configMap:
          defaultMode: 420
          items:
          - key: etcd-config
            path: etcd.yml
          name: {{ template "cilium.fullname" . }}-config
        name: etcd-config-path
      # To read the k8s etcd secrets in case the user might want to use TLS
      - name: etcd-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-etcd-secrets
      # Transparent encryption
      - name: cilium-ipsec-secrets
        secret:
          secretName: cilium-ipsec-keys
          defaultMode: 420
          optional: true
      # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
    {{- if eq .Values.agent.runtime "docker" }}
        # To read docker events from the node
      - hostPath:
          path: /var/run/docker.sock
          type: Socket
        name: docker-socket
    {{- else if eq .Values.agent.runtime "containerd" }}
        # To read labels from containerD containers running in the host
      - hostPath:
          path: /var/run/containerd/containerd.sock
          type: Socket
        name: containerd-socket
    {{- else if eq .Values.agent.runtime "crio" }}
        # To read labels from CRI-O containers running in the host
      - hostPath:
          path: /var/run/crio/crio.sock
          type: Socket
        name: crio-socket
    {{- end }}

  updateStrategy:
    rollingUpdate:
      # Specifies the maximum number of Pods that can be unavailable during the update process.
      maxUnavailable: 2
    type: RollingUpdate
