{{/* vim: set filetype=mustache: */}}
{{- $prometheus_port := splitList ":" (toString (index .Values.config "prometheus-serve-addr"))|last -}}
apiVersion: {{ include "apps.apiVersion" . }}
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/name: {{ include "cilium.name" . }}
    helm.sh/chart: {{ include "cilium.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: agent
    kubernetes.io/cluster-service: "true"
  name: {{ template "cilium.fullname" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: agent
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2  # Specifies the maximum number of Pods that can be unavailable during the update process.
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cilium-cm.yml") . | sha256sum }}
      {{- if hasKey .Values.config "prometheus-serve-addr" }}
        prometheus.io/port: "{{ $prometheus_port }}"
        prometheus.io/scrape: "true"
      {{- end }}
      {{- if semverCompare "< 1.11-0" .Capabilities.KubeVersion.GitVersion }}
        scheduler.alpha.kubernetes.io/critical-pod: ""  # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      {{- end }}
      {{- with .Values.agent.annotations }}
{{ toYaml . | indent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "cilium.name" . }}
        helm.sh/chart: {{ include "cilium.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/component: agent
        kubernetes.io/cluster-service: "true"
      {{- with .Values.agent.labels }}
{{ toYaml . | indent 8 }}
      {{- end }}
    spec:
      containers:
      - command:
        - cilium-agent
        args:
        - --debug=$(CILIUM_DEBUG)
        - --kvstore=$(CILIUM_KVSTORE)
        - --kvstore-opt=$(CILIUM_KVSTORE_OPT)
        - --config=/etc/cilium/config.yml
        env:
      {{- with .Values.agent.env }}
{{ toYaml . | indent 8 }}
      {{- end }}
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: {{ template "cilium.fullname" . }}
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              key: cluster-name
              name: {{ template "cilium.fullname" . }}
              optional: true
        - name: CILIUM_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: cluster-id
              name: {{ template "cilium.fullname" . }}
              optional: true
        - name: CILIUM_KVSTORE
          valueFrom:
            configMapKeyRef:
              key: kvstore
              name: {{ template "cilium.fullname" . }}
        - name: CILIUM_KVSTORE_OPT
          valueFrom:
            configMapKeyRef:
              key: kvstore-opt
              name: {{ template "cilium.fullname" . }}
        - name: GOPS_CONFIG_DIR  # To make gops not write /root/.config
          value: /var/run/cilium
        - name: TMPDIR           # For bpf run_probes.sh
          value: /var/run/cilium
        image: "{{ .Values.agent.image.repository }}:{{ .Values.agent.image.tag }}"
        imagePullPolicy: {{ .Values.agent.image.pullPolicy }}
        lifecycle:
          postStart:
            exec:
              command:
              - /cni-install.sh
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        livenessProbe:
          exec:
            command:
            - cilium
            - status
            - --brief
          failureThreshold: 10
          # The initial delay for the liveness probe is intentionally large to
          # avoid an endless kill & restart cycle if in the event that the initial
          # bootstrapping takes longer than expected.
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: cilium-agent
      {{- if hasKey .Values.config "prometheus-serve-addr" }}
        ports:
        - containerPort: {{ $prometheus_port }}
          hostPort: {{ $prometheus_port }}
          name: prometheus
          protocol: TCP
      {{- end }}
        readinessProbe:
          exec:
            command:
            - cilium
            - status
            - --brief
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /sbin/modprobe
          name: sbin-modprobe
          readOnly: true
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /var/run
          name: cilium-var-run
        - mountPath: /var/lib/cilium
          name: cilium-lib
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /etc/pki/etcd
          name: etcd-secrets
          readOnly: true
        - mountPath: /etc/pki/ipsec
          name: ipsec-secrets
          readOnly: true
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /etc/cilium
          name: cilium-config
          readOnly: true
      {{- if eq .Values.agent.runtime "docker" }}
        - mountPath: /var/run/docker.sock
          name: docker-socket
      {{- else if eq .Values.agent.runtime "containerd" }}
        - mountPath: /var/run/containerd/containerd.sock
          name: containerd-socket
      {{- else if eq .Values.agent.runtime "crio" }}
        - mountPath: /var/run/crio/crio.sock
          name: crio-socket
      {{- end }}
      dnsPolicy: {{ .Values.agent.dnsPolicy }}
    {{- with .Values.agent.hostAliases }}
      hostAliases:
{{ toYaml . | indent 8 }}
    {{- end }}
      hostNetwork: true
      hostPID: false
      initContainers:
      - command:
        - /init-container.sh
        env:
        - name: CLEAN_CILIUM_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: {{ template "cilium.fullname" . }}
              optional: true
        - name: CLEAN_CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: {{ template "cilium.fullname" . }}
              optional: true
        - name: CILIUM_WAIT_BPF_MOUNT
          valueFrom:
            configMapKeyRef:
              key: wait-bpf-mount
              name: {{ template "cilium.fullname" . }}
              optional: true
        image: "{{ .Values.agent.init_image.repository }}:{{ .Values.agent.init_image.tag }}"
        imagePullPolicy: {{ .Values.agent.init_image.pullPolicy }}
        name: clean-cilium-state
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /sbin/modprobe
          name: sbin-modprobe
          readOnly: true
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /var/run
          name: cilium-var-run
        - mountPath: /var/lib/cilium
          name: cilium-lib
      restartPolicy: Always
    {{- if semverCompare "<= 1.8-0" .Capabilities.KubeVersion.GitVersion }}
      serviceAccount: {{ template "cilium.fullname" . }}
    {{- else }}
      serviceAccountName: {{ template "cilium.fullname" . }}
    {{- end }}
      terminationGracePeriodSeconds: 1
    {{- if semverCompare "=> 1.11-0" .Capabilities.KubeVersion.GitVersion }}
      priorityClassName: system-node-critical
    {{- end }}
    {{- with .Values.agent.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.agent.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: cilium-run  # To keep state between restarts / upgrades
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
      - name: cilium-lib  # Cilium does bpf & clustermesh magic here
        emptyDir: {}
      - name: cilium-var-run  # netns is created here
        emptyDir:
          medium: Memory
      - name: bpf-maps  # To keep state between restarts / upgrades for bpf maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      - name: lib-modules  # To be able to load kernel modules
        hostPath:
          path: /lib/modules
          type: Directory
      - name: sbin-modprobe  # To be able to load ip[6]tables kernel modules
        hostPath:
          path: /sbin/modprobe
          type: File
      - name: cni-path  # To install cilium cni plugin in the host
        hostPath:
          path: /opt/cni/bin
          type: DirectoryOrCreate
      - name: etc-cni-netd  # To install cilium cni configuration in the host
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
      - name: cilium-config  # To read the configuration from the config map
        configMap:
          name: {{ template "cilium.fullname" . }}
          items:
          - key: etcd
            path: etcd.yml
          - key: cilium
            path: config.yml
          defaultMode: 420
      - name: etcd-secrets  # To read the k8s etcd secrets in case the user might want to use TLS
    {{- if hasKey .Values.etcd "secretVolume" }}
{{ toYaml .Values.etcd.secretVolume | indent 8 }}
    {{- else  }}
        secret:
          secretName: {{ .Values.etcd.secretName|default (printf "%s-etcd" (include "cilium.fullname" .)) }}
          defaultMode: 420
          optional: true
    {{- end }}
      - name: ipsec-secrets  # Transparent encryption
        secret:
          secretName: {{ default (printf "%s-ipsec" (include "cilium.fullname" .)) .Values.agent.ipsec.secretName }}
          defaultMode: 420
          optional: true
      - name: clustermesh-secrets  # To read the clustermesh configuration
        secret:
          secretName: {{ default (printf "%s-clustermesh" (include "cilium.fullname" .)) .Values.agent.clustermesh.secretName }}
          defaultMode: 420
          optional: true
    {{- if eq .Values.agent.runtime "docker" }}
      - name: docker-socket  # To read docker events from the node
        hostPath:
          path: /var/run/docker.sock
          type: Socket
    {{- else if eq .Values.agent.runtime "containerd" }}
      - name: containerd-socket  # To read labels from containerD containers running in the host
        hostPath:
          path: /var/run/containerd/containerd.sock
          type: Socket
    {{- else if eq .Values.agent.runtime "crio" }}
      - name: crio-socket  # To read labels from CRI-O containers running in the host
        hostPath:
          path: /var/run/crio/crio.sock
          type: Socket
    {{- end }}
